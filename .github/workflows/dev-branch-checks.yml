name: Stock Price Prediction Dev Checks

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev

jobs:
  check_changes:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for changes
        id: check_changes
        run: |
          git fetch --unshallow || true
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q .; then
            echo "Changes detected"
            echo "skip_checks=false" >> $GITHUB_OUTPUT
          else
            echo "No changes detected"
            echo "skip_checks=true" >> $GITHUB_OUTPUT
          fi

      - name: Set up Python
        if: steps.check_changes.outputs.skip_checks != 'true'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11.7'

      - name: Install TA-Lib
        if: steps.check_changes.outputs.skip_checks != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential wget
          wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz
          tar -xzf ta-lib-0.4.0-src.tar.gz
          cd ta-lib/
          ./configure --prefix=/usr/local
          make
          sudo make install
          echo "/usr/local/lib" | sudo tee -a /etc/ld.so.conf.d/ta-lib.conf
          sudo ldconfig
          # Verify installation
          ls -la /usr/local/lib/libta_lib*
      
      - name: Install TA-Lib Python wrapper manually
        if: steps.check_changes.outputs.skip_checks != 'true'
        run: |
          # Make sure we have the right dependencies
          python -m pip install --upgrade pip setuptools wheel
          pip install numpy Cython
          
          # Clone the repo
          git clone https://github.com/mrjbq7/ta-lib.git ta-lib-src
          cd ta-lib-src
          
          # Create a custom setup.cfg file to override paths
          cat > setup.cfg << EOF
          [build_ext]
          include_dirs = /usr/local/include
          library_dirs = /usr/local/lib
          libraries = ta_lib
          EOF
          
          # Set environment variables explicitly
          export TA_LIBRARY_PATH=/usr/local/lib
          export TA_INCLUDE_PATH=/usr/local/include
          export CFLAGS="-I$TA_INCLUDE_PATH"
          export LDFLAGS="-L$TA_LIBRARY_PATH -lta_lib"
          
          # Use the full path to the lib when linking
          find /usr/local -name "libta_lib*"
          ls -la /usr/local/lib/libta_lib*
          
          # Build with very explicit paths
          python setup.py build_ext \
            --include-dirs=/usr/local/include \
            --library-dirs=/usr/local/lib \
            --rpath=/usr/local/lib
          
          # Install
          python setup.py install
          
          # Verify installation
          cd ..
          python -c "import talib; print('TA-Lib version:', talib.__version__)"
      
      - name: Install Python packages
        if: steps.check_changes.outputs.skip_checks != 'true'
        run: |
          export LD_LIBRARY_PATH="/usr/local/lib:$LD_LIBRARY_PATH"
          pip install -r requirements.txt

      - name: Run Flake8 Linting
        if: steps.check_changes.outputs.skip_checks != 'true'
        run: |
          echo "Running flake8 linting..."
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run Unit Tests
        if: steps.check_changes.outputs.skip_checks != 'true'
        run: |
          export CFLAGS="-I/usr/local/include"
          export LDFLAGS="-L/usr/local/lib"
          export LD_LIBRARY_PATH="/usr/local/lib:$LD_LIBRARY_PATH"
          export PKG_CONFIG_PATH="/usr/local/lib/pkgconfig"

          python -m pytest tests/ --maxfail=5 --disable-warnings

      - name: Verify FastAPI App
        if: steps.check_changes.outputs.skip_checks != 'true'
        run: |
          nohup uvicorn api:app --host 127.0.0.1 --port 8002 --reload &
          sleep 5
          curl -f http://127.0.0.1:8002/docs || (echo "FastAPI server failed to start" && exit 1)
          echo "âœ… FastAPI app is running successfully."

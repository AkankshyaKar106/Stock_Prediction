name: Stock Price Prediction Dev Checks

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev

jobs:
  check_changes:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for changes
        id: check_changes
        run: |
          git fetch --unshallow || true
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q .; then
            echo "Changes detected"
            echo "skip_checks=false" >> $GITHUB_OUTPUT
          else
            echo "No changes detected"
            echo "skip_checks=true" >> $GITHUB_OUTPUT
          fi

      - name: Set up Python
        if: steps.check_changes.outputs.skip_checks != 'true'
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install TA-Lib C library
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential wget
          # Download and extract TA-Lib source
          wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz
          tar -xzf ta-lib-0.4.0-src.tar.gz
          cd ta-lib/
          # Patch format-security warning
          sed -i 's/fprintf( out, prefix );/fprintf( out, "%s", prefix );/' src/tools/gen_code/gen_code.c
          # Configure, build, and install TA-Lib
          ./configure --prefix=/usr/local CFLAGS="-Wno-format-security"
          # Build with single job to avoid race conditions
          make -j1
          sudo make install
          # Update shared library cache
          sudo ldconfig

      - name: Install TA-Lib Python wrapper
        run: |
          # Clean any existing installations
          pip uninstall -y numpy ta-lib || true
          
          # Install specific versions known to work together
          python -m pip install --upgrade pip setuptools wheel
          pip install numpy==1.23.5
          pip install Cython==0.29.36
          
          # Set environment variables for TA-Lib
          export TA_LIBRARY_PATH=/usr/local/lib
          export TA_INCLUDE_PATH=/usr/local/include
          export CFLAGS="-I/usr/local/include"
          export LDFLAGS="-L/usr/local/lib"
          
          # Try the official wheel from GitHub repo
          pip install --no-cache-dir https://github.com/mrjbq7/ta-lib/releases/download/0.4.24/TA_Lib-0.4.24-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl
          
          # If that fails, build from source
          if ! python -c "import talib" 2>/dev/null; then
            echo "Wheel install failed. Building from source..."
            CFLAGS="-I/usr/local/include" LDFLAGS="-L/usr/local/lib" pip install --no-binary :all: ta-lib==0.4.24
          fi
          
          # Final check
          python -c "import talib; print('TA-Lib version:', talib.__version__)"
          python -c "import numpy; print('NumPy version:', numpy.__version__)"
      
      - name: Install remaining Python packages
        run: |
          # Install pytest first
          pip install pytest
          
          # Then install the rest of the requirements
          # Use --no-deps first to avoid upgrading numpy
          pip install -r requirements.txt --no-deps || true
          
          # Then make sure all dependencies are installed correctly
          pip install -r requirements.txt

      - name: Install linting tools
        run: |
          pip install flake8
          echo "Flake8 installed $(flake8 --version)"

      - name: Run Flake8 Linting
        if: steps.check_changes.outputs.skip_checks != 'true'
        run: |
          echo "Running flake8 linting..."
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run Unit Tests
        if: steps.check_changes.outputs.skip_checks != 'true'
        run: |
          export CFLAGS="-I/usr/local/include"
          export LDFLAGS="-L/usr/local/lib"
          export LD_LIBRARY_PATH="/usr/local/lib:$LD_LIBRARY_PATH"
          export PKG_CONFIG_PATH="/usr/local/lib/pkgconfig"

          python -m pytest tests/ --maxfail=5 --disable-warnings

      - name: Verify FastAPI App
        if: steps.check_changes.outputs.skip_checks != 'true'
        run: |
          nohup uvicorn api:app --host 127.0.0.1 --port 8002 --reload &
          sleep 5
          curl -f http://127.0.0.1:8002/docs || (echo "FastAPI server failed to start" && exit 1)
          echo "âœ… FastAPI app is running successfully."
